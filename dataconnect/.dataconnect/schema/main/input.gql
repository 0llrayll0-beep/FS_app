"""
✨ `LicensePlateScan_KeyOutput` returns the primary key fields of table type `LicensePlateScan`.

It has the same format as `LicensePlateScan_Key`, but is only used as mutation return value.
"""
scalar LicensePlateScan_KeyOutput
"""
✨ `User_KeyOutput` returns the primary key fields of table type `User`.

It has the same format as `User_Key`, but is only used as mutation return value.
"""
scalar User_KeyOutput
"""
✨ `UserNote_KeyOutput` returns the primary key fields of table type `UserNote`.

It has the same format as `UserNote_Key`, but is only used as mutation return value.
"""
scalar UserNote_KeyOutput
"""
✨ `VehicleInfo_KeyOutput` returns the primary key fields of table type `VehicleInfo`.

It has the same format as `VehicleInfo_Key`, but is only used as mutation return value.
"""
scalar VehicleInfo_KeyOutput
"""
✨ Generated data input type for table 'LicensePlateScan'. It includes all necessary fields for creating or upserting rows into table.
"""
input LicensePlateScan_Data {
  """
  ✨ Generated from Field `LicensePlateScan`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `LicensePlateScan`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `LicensePlateScan`.`userId` of type `UUID`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `LicensePlateScan`.`userId` of type `UUID`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `LicensePlateScan`.`user` of type `User`
  """
  user: User_Key
  """
  ✨ Generated from Field `LicensePlateScan`.`imageUrl` of type `String`
  """
  imageUrl: String
  """
  ✨ `_expr` server value variant of `imageUrl` (✨ Generated from Field `LicensePlateScan`.`imageUrl` of type `String`)
  """
  imageUrl_expr: String_Expr
  """
  ✨ Generated from Field `LicensePlateScan`.`location` of type `String`
  """
  location: String
  """
  ✨ `_expr` server value variant of `location` (✨ Generated from Field `LicensePlateScan`.`location` of type `String`)
  """
  location_expr: String_Expr
  """
  ✨ Generated from Field `LicensePlateScan`.`plateNumber` of type `String!`
  """
  plateNumber: String
  """
  ✨ `_expr` server value variant of `plateNumber` (✨ Generated from Field `LicensePlateScan`.`plateNumber` of type `String!`)
  """
  plateNumber_expr: String_Expr
  """
  ✨ Generated from Field `LicensePlateScan`.`scanDate` of type `Timestamp!`
  """
  scanDate: Timestamp
  """
  ✨ `_expr` server value variant of `scanDate` (✨ Generated from Field `LicensePlateScan`.`scanDate` of type `Timestamp!`)
  """
  scanDate_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `scanDate` (✨ Generated from Field `LicensePlateScan`.`scanDate` of type `Timestamp!`)
  """
  scanDate_time: Timestamp_Relative
  """
  ✨ `_update` server value variant of `scanDate` (✨ Generated from Field `LicensePlateScan`.`scanDate` of type `Timestamp!`)
  """
  scanDate_update: [Timestamp_Update!]
  """
  ✨ Generated from Field `LicensePlateScan`.`scanMethod` of type `String!`
  """
  scanMethod: String
  """
  ✨ `_expr` server value variant of `scanMethod` (✨ Generated from Field `LicensePlateScan`.`scanMethod` of type `String!`)
  """
  scanMethod_expr: String_Expr
}
"""
✨ Generated filter input type for table 'LicensePlateScan'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input LicensePlateScan_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [LicensePlateScan_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: LicensePlateScan_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [LicensePlateScan_Filter!]
  """
  ✨ Generated from Field `LicensePlateScan`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`userId` of type `UUID`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`user` of type `User`
  """
  user: User_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`imageUrl` of type `String`
  """
  imageUrl: String_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`location` of type `String`
  """
  location: String_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`plateNumber` of type `String!`
  """
  plateNumber: String_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`scanDate` of type `Timestamp!`
  """
  scanDate: Timestamp_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`scanMethod` of type `String!`
  """
  scanMethod: String_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`userNotes_on_licensePlateScan` of type `[UserNote!]!`
  """
  userNotes_on_licensePlateScan: UserNote_ListFilter
  """
  ✨ Generated from Field `LicensePlateScan`.`vehicleInfos_on_licensePlateScan` of type `[VehicleInfo!]!`
  """
  vehicleInfos_on_licensePlateScan: VehicleInfo_ListFilter
}
"""
✨ Generated first-row input type for table 'LicensePlateScan'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input LicensePlateScan_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [LicensePlateScan_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: LicensePlateScan_Filter
}
"""
✨ Generated having input type for table 'LicensePlateScan'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input LicensePlateScan_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [LicensePlateScan_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: LicensePlateScan_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [LicensePlateScan_Having!]
  """
  ✨ Generated from Field `LicensePlateScan`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`imageUrl_count` of type `Int!`
  """
  imageUrl_count: Int_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`location_count` of type `Int!`
  """
  location_count: Int_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`plateNumber_count` of type `Int!`
  """
  plateNumber_count: Int_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`scanDate_count` of type `Int!`
  """
  scanDate_count: Int_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`scanMethod_count` of type `Int!`
  """
  scanMethod_count: Int_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`userId_count` of type `Int!`
  """
  userId_count: Int_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`scanDate_min` of type `Timestamp`
  """
  scanDate_min: Timestamp_Filter
  """
  ✨ Generated from Field `LicensePlateScan`.`scanDate_max` of type `Timestamp`
  """
  scanDate_max: Timestamp_Filter
}
"""
✨ Generated key input type for table 'LicensePlateScan'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input LicensePlateScan_Key {
  """
  ✨ Generated from Field `LicensePlateScan`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `LicensePlateScan`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'LicensePlateScan'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input LicensePlateScan_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: LicensePlateScan_Filter
}
"""
✨ Generated order input type for table 'LicensePlateScan'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input LicensePlateScan_Order {
  """
  ✨ Generated from Field `LicensePlateScan`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`userId` of type `UUID`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`user` of type `User`
  """
  user: User_Order
  """
  ✨ Generated from Field `LicensePlateScan`.`imageUrl` of type `String`
  """
  imageUrl: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`location` of type `String`
  """
  location: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`plateNumber` of type `String!`
  """
  plateNumber: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`scanDate` of type `Timestamp!`
  """
  scanDate: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`scanMethod` of type `String!`
  """
  scanMethod: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`_count` of type `Int!`
  """
  _count: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`id_count` of type `Int!`
  """
  id_count: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`imageUrl_count` of type `Int!`
  """
  imageUrl_count: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`location_count` of type `Int!`
  """
  location_count: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`plateNumber_count` of type `Int!`
  """
  plateNumber_count: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`scanDate_count` of type `Int!`
  """
  scanDate_count: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`scanMethod_count` of type `Int!`
  """
  scanMethod_count: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`userId_count` of type `Int!`
  """
  userId_count: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`scanDate_min` of type `Timestamp`
  """
  scanDate_min: OrderDirection
  """
  ✨ Generated from Field `LicensePlateScan`.`scanDate_max` of type `Timestamp`
  """
  scanDate_max: OrderDirection
}
"""
✨ Generated data input type for table 'User'. It includes all necessary fields for creating or upserting rows into table.
"""
input User_Data {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ `_update` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_update: [Timestamp_Update!]
  """
  ✨ Generated from Field `User`.`displayName` of type `String!`
  """
  displayName: String
  """
  ✨ `_expr` server value variant of `displayName` (✨ Generated from Field `User`.`displayName` of type `String!`)
  """
  displayName_expr: String_Expr
  """
  ✨ Generated from Field `User`.`email` of type `String`
  """
  email: String
  """
  ✨ `_expr` server value variant of `email` (✨ Generated from Field `User`.`email` of type `String`)
  """
  email_expr: String_Expr
  """
  ✨ Generated from Field `User`.`photoUrl` of type `String`
  """
  photoUrl: String
  """
  ✨ `_expr` server value variant of `photoUrl` (✨ Generated from Field `User`.`photoUrl` of type `String`)
  """
  photoUrl_expr: String_Expr
}
"""
✨ Generated filter input type for table 'User'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [User_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: User_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [User_Filter!]
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `User`.`displayName` of type `String!`
  """
  displayName: String_Filter
  """
  ✨ Generated from Field `User`.`email` of type `String`
  """
  email: String_Filter
  """
  ✨ Generated from Field `User`.`photoUrl` of type `String`
  """
  photoUrl: String_Filter
  """
  ✨ Generated from Field `User`.`licensePlateScans_on_user` of type `[LicensePlateScan!]!`
  """
  licensePlateScans_on_user: LicensePlateScan_ListFilter
  """
  ✨ Generated from Field `User`.`userNotes_on_user` of type `[UserNote!]!`
  """
  userNotes_on_user: UserNote_ListFilter
}
"""
✨ Generated first-row input type for table 'User'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input User_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [User_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: User_Filter
}
"""
✨ Generated having input type for table 'User'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [User_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: User_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [User_Having!]
  """
  ✨ Generated from Field `User`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `User`.`createdAt_count` of type `Int!`
  """
  createdAt_count: Int_Filter
  """
  ✨ Generated from Field `User`.`displayName_count` of type `Int!`
  """
  displayName_count: Int_Filter
  """
  ✨ Generated from Field `User`.`email_count` of type `Int!`
  """
  email_count: Int_Filter
  """
  ✨ Generated from Field `User`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `User`.`photoUrl_count` of type `Int!`
  """
  photoUrl_count: Int_Filter
  """
  ✨ Generated from Field `User`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: Timestamp_Filter
  """
  ✨ Generated from Field `User`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: Timestamp_Filter
}
"""
✨ Generated key input type for table 'User'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input User_Key {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'User'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input User_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: User_Filter
}
"""
✨ Generated order input type for table 'User'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input User_Order {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `User`.`displayName` of type `String!`
  """
  displayName: OrderDirection
  """
  ✨ Generated from Field `User`.`email` of type `String`
  """
  email: OrderDirection
  """
  ✨ Generated from Field `User`.`photoUrl` of type `String`
  """
  photoUrl: OrderDirection
  """
  ✨ Generated from Field `User`.`_count` of type `Int!`
  """
  _count: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt_count` of type `Int!`
  """
  createdAt_count: OrderDirection
  """
  ✨ Generated from Field `User`.`displayName_count` of type `Int!`
  """
  displayName_count: OrderDirection
  """
  ✨ Generated from Field `User`.`email_count` of type `Int!`
  """
  email_count: OrderDirection
  """
  ✨ Generated from Field `User`.`id_count` of type `Int!`
  """
  id_count: OrderDirection
  """
  ✨ Generated from Field `User`.`photoUrl_count` of type `Int!`
  """
  photoUrl_count: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: OrderDirection
}
"""
✨ Generated data input type for table 'UserNote'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserNote_Data {
  """
  ✨ Generated from Field `UserNote`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `UserNote`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `UserNote`.`licensePlateScanId` of type `UUID`
  """
  licensePlateScanId: UUID
  """
  ✨ `_expr` server value variant of `licensePlateScanId` (✨ Generated from Field `UserNote`.`licensePlateScanId` of type `UUID`)
  """
  licensePlateScanId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserNote`.`userId` of type `UUID`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserNote`.`userId` of type `UUID`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserNote`.`licensePlateScan` of type `LicensePlateScan`
  """
  licensePlateScan: LicensePlateScan_Key
  """
  ✨ Generated from Field `UserNote`.`user` of type `User`
  """
  user: User_Key
  """
  ✨ Generated from Field `UserNote`.`content` of type `String!`
  """
  content: String
  """
  ✨ `_expr` server value variant of `content` (✨ Generated from Field `UserNote`.`content` of type `String!`)
  """
  content_expr: String_Expr
  """
  ✨ Generated from Field `UserNote`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `UserNote`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `UserNote`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ `_update` server value variant of `createdAt` (✨ Generated from Field `UserNote`.`createdAt` of type `Timestamp!`)
  """
  createdAt_update: [Timestamp_Update!]
  """
  ✨ Generated from Field `UserNote`.`tags` of type `[String]`
  """
  tags: [String!]
  """
  ✨ `_update` server value variant of `tags` (✨ Generated from Field `UserNote`.`tags` of type `[String]`)
  """
  tags_update: [String_ListUpdate!]
}
"""
✨ Generated filter input type for table 'UserNote'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserNote_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserNote_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserNote_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserNote_Filter!]
  """
  ✨ Generated from Field `UserNote`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `UserNote`.`licensePlateScanId` of type `UUID`
  """
  licensePlateScanId: UUID_Filter
  """
  ✨ Generated from Field `UserNote`.`userId` of type `UUID`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserNote`.`licensePlateScan` of type `LicensePlateScan`
  """
  licensePlateScan: LicensePlateScan_Filter
  """
  ✨ Generated from Field `UserNote`.`user` of type `User`
  """
  user: User_Filter
  """
  ✨ Generated from Field `UserNote`.`content` of type `String!`
  """
  content: String_Filter
  """
  ✨ Generated from Field `UserNote`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `UserNote`.`tags` of type `[String]`
  """
  tags: String_ListFilter
}
"""
✨ Generated first-row input type for table 'UserNote'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserNote_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserNote_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserNote_Filter
}
"""
✨ Generated having input type for table 'UserNote'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserNote_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [UserNote_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: UserNote_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [UserNote_Having!]
  """
  ✨ Generated from Field `UserNote`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `UserNote`.`content_count` of type `Int!`
  """
  content_count: Int_Filter
  """
  ✨ Generated from Field `UserNote`.`createdAt_count` of type `Int!`
  """
  createdAt_count: Int_Filter
  """
  ✨ Generated from Field `UserNote`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `UserNote`.`licensePlateScanId_count` of type `Int!`
  """
  licensePlateScanId_count: Int_Filter
  """
  ✨ Generated from Field `UserNote`.`userId_count` of type `Int!`
  """
  userId_count: Int_Filter
  """
  ✨ Generated from Field `UserNote`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: Timestamp_Filter
  """
  ✨ Generated from Field `UserNote`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: Timestamp_Filter
}
"""
✨ Generated key input type for table 'UserNote'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserNote_Key {
  """
  ✨ Generated from Field `UserNote`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `UserNote`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserNote'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserNote_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserNote_Filter
}
"""
✨ Generated order input type for table 'UserNote'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserNote_Order {
  """
  ✨ Generated from Field `UserNote`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`licensePlateScanId` of type `UUID`
  """
  licensePlateScanId: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`userId` of type `UUID`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`licensePlateScan` of type `LicensePlateScan`
  """
  licensePlateScan: LicensePlateScan_Order
  """
  ✨ Generated from Field `UserNote`.`user` of type `User`
  """
  user: User_Order
  """
  ✨ Generated from Field `UserNote`.`content` of type `String!`
  """
  content: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`_count` of type `Int!`
  """
  _count: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`content_count` of type `Int!`
  """
  content_count: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`createdAt_count` of type `Int!`
  """
  createdAt_count: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`id_count` of type `Int!`
  """
  id_count: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`licensePlateScanId_count` of type `Int!`
  """
  licensePlateScanId_count: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`userId_count` of type `Int!`
  """
  userId_count: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`createdAt_min` of type `Timestamp`
  """
  createdAt_min: OrderDirection
  """
  ✨ Generated from Field `UserNote`.`createdAt_max` of type `Timestamp`
  """
  createdAt_max: OrderDirection
}
"""
✨ Generated data input type for table 'VehicleInfo'. It includes all necessary fields for creating or upserting rows into table.
"""
input VehicleInfo_Data {
  """
  ✨ Generated from Field `VehicleInfo`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `VehicleInfo`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `VehicleInfo`.`licensePlateScanId` of type `UUID`
  """
  licensePlateScanId: UUID
  """
  ✨ `_expr` server value variant of `licensePlateScanId` (✨ Generated from Field `VehicleInfo`.`licensePlateScanId` of type `UUID`)
  """
  licensePlateScanId_expr: UUID_Expr
  """
  ✨ Generated from Field `VehicleInfo`.`licensePlateScan` of type `LicensePlateScan`
  """
  licensePlateScan: LicensePlateScan_Key
  """
  ✨ Generated from Field `VehicleInfo`.`chassisNumber` of type `String`
  """
  chassisNumber: String
  """
  ✨ `_expr` server value variant of `chassisNumber` (✨ Generated from Field `VehicleInfo`.`chassisNumber` of type `String`)
  """
  chassisNumber_expr: String_Expr
  """
  ✨ Generated from Field `VehicleInfo`.`color` of type `String`
  """
  color: String
  """
  ✨ `_expr` server value variant of `color` (✨ Generated from Field `VehicleInfo`.`color` of type `String`)
  """
  color_expr: String_Expr
  """
  ✨ Generated from Field `VehicleInfo`.`lastRegistrationDate` of type `Date`
  """
  lastRegistrationDate: Date
  """
  ✨ `_date` server value variant of `lastRegistrationDate` (✨ Generated from Field `VehicleInfo`.`lastRegistrationDate` of type `Date`)
  """
  lastRegistrationDate_date: Date_Relative
  """
  ✨ `_expr` server value variant of `lastRegistrationDate` (✨ Generated from Field `VehicleInfo`.`lastRegistrationDate` of type `Date`)
  """
  lastRegistrationDate_expr: Date_Expr
  """
  ✨ `_update` server value variant of `lastRegistrationDate` (✨ Generated from Field `VehicleInfo`.`lastRegistrationDate` of type `Date`)
  """
  lastRegistrationDate_update: [Date_Update!]
  """
  ✨ Generated from Field `VehicleInfo`.`make` of type `String`
  """
  make: String
  """
  ✨ `_expr` server value variant of `make` (✨ Generated from Field `VehicleInfo`.`make` of type `String`)
  """
  make_expr: String_Expr
  """
  ✨ Generated from Field `VehicleInfo`.`model` of type `String`
  """
  model: String
  """
  ✨ `_expr` server value variant of `model` (✨ Generated from Field `VehicleInfo`.`model` of type `String`)
  """
  model_expr: String_Expr
  """
  ✨ Generated from Field `VehicleInfo`.`plateNumber` of type `String!`
  """
  plateNumber: String
  """
  ✨ `_expr` server value variant of `plateNumber` (✨ Generated from Field `VehicleInfo`.`plateNumber` of type `String!`)
  """
  plateNumber_expr: String_Expr
  """
  ✨ Generated from Field `VehicleInfo`.`retrievedAt` of type `Timestamp!`
  """
  retrievedAt: Timestamp
  """
  ✨ `_expr` server value variant of `retrievedAt` (✨ Generated from Field `VehicleInfo`.`retrievedAt` of type `Timestamp!`)
  """
  retrievedAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `retrievedAt` (✨ Generated from Field `VehicleInfo`.`retrievedAt` of type `Timestamp!`)
  """
  retrievedAt_time: Timestamp_Relative
  """
  ✨ `_update` server value variant of `retrievedAt` (✨ Generated from Field `VehicleInfo`.`retrievedAt` of type `Timestamp!`)
  """
  retrievedAt_update: [Timestamp_Update!]
  """
  ✨ Generated from Field `VehicleInfo`.`year` of type `Int`
  """
  year: Int
  """
  ✨ `_expr` server value variant of `year` (✨ Generated from Field `VehicleInfo`.`year` of type `Int`)
  """
  year_expr: Int_Expr
  """
  ✨ `_update` server value variant of `year` (✨ Generated from Field `VehicleInfo`.`year` of type `Int`)
  """
  year_update: [Int_Update!]
}
"""
✨ Generated filter input type for table 'VehicleInfo'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VehicleInfo_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VehicleInfo_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VehicleInfo_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VehicleInfo_Filter!]
  """
  ✨ Generated from Field `VehicleInfo`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`licensePlateScanId` of type `UUID`
  """
  licensePlateScanId: UUID_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`licensePlateScan` of type `LicensePlateScan`
  """
  licensePlateScan: LicensePlateScan_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`chassisNumber` of type `String`
  """
  chassisNumber: String_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`color` of type `String`
  """
  color: String_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`lastRegistrationDate` of type `Date`
  """
  lastRegistrationDate: Date_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`make` of type `String`
  """
  make: String_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`model` of type `String`
  """
  model: String_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`plateNumber` of type `String!`
  """
  plateNumber: String_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`retrievedAt` of type `Timestamp!`
  """
  retrievedAt: Timestamp_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`year` of type `Int`
  """
  year: Int_Filter
}
"""
✨ Generated first-row input type for table 'VehicleInfo'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VehicleInfo_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VehicleInfo_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VehicleInfo_Filter
}
"""
✨ Generated having input type for table 'VehicleInfo'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VehicleInfo_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [VehicleInfo_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: VehicleInfo_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [VehicleInfo_Having!]
  """
  ✨ Generated from Field `VehicleInfo`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`chassisNumber_count` of type `Int!`
  """
  chassisNumber_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`color_count` of type `Int!`
  """
  color_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`lastRegistrationDate_count` of type `Int!`
  """
  lastRegistrationDate_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`licensePlateScanId_count` of type `Int!`
  """
  licensePlateScanId_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`make_count` of type `Int!`
  """
  make_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`model_count` of type `Int!`
  """
  model_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`plateNumber_count` of type `Int!`
  """
  plateNumber_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`retrievedAt_count` of type `Int!`
  """
  retrievedAt_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`year_count` of type `Int!`
  """
  year_count: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`year_sum` of type `Int`
  """
  year_sum: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`year_avg` of type `Float`
  """
  year_avg: Float_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`lastRegistrationDate_min` of type `Date`
  """
  lastRegistrationDate_min: Date_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`retrievedAt_min` of type `Timestamp`
  """
  retrievedAt_min: Timestamp_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`year_min` of type `Int`
  """
  year_min: Int_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`lastRegistrationDate_max` of type `Date`
  """
  lastRegistrationDate_max: Date_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`retrievedAt_max` of type `Timestamp`
  """
  retrievedAt_max: Timestamp_Filter
  """
  ✨ Generated from Field `VehicleInfo`.`year_max` of type `Int`
  """
  year_max: Int_Filter
}
"""
✨ Generated key input type for table 'VehicleInfo'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VehicleInfo_Key {
  """
  ✨ Generated from Field `VehicleInfo`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `VehicleInfo`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VehicleInfo'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VehicleInfo_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VehicleInfo_Filter
}
"""
✨ Generated order input type for table 'VehicleInfo'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VehicleInfo_Order {
  """
  ✨ Generated from Field `VehicleInfo`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`licensePlateScanId` of type `UUID`
  """
  licensePlateScanId: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`licensePlateScan` of type `LicensePlateScan`
  """
  licensePlateScan: LicensePlateScan_Order
  """
  ✨ Generated from Field `VehicleInfo`.`chassisNumber` of type `String`
  """
  chassisNumber: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`color` of type `String`
  """
  color: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`lastRegistrationDate` of type `Date`
  """
  lastRegistrationDate: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`make` of type `String`
  """
  make: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`model` of type `String`
  """
  model: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`plateNumber` of type `String!`
  """
  plateNumber: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`retrievedAt` of type `Timestamp!`
  """
  retrievedAt: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`year` of type `Int`
  """
  year: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`_count` of type `Int!`
  """
  _count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`chassisNumber_count` of type `Int!`
  """
  chassisNumber_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`color_count` of type `Int!`
  """
  color_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`id_count` of type `Int!`
  """
  id_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`lastRegistrationDate_count` of type `Int!`
  """
  lastRegistrationDate_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`licensePlateScanId_count` of type `Int!`
  """
  licensePlateScanId_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`make_count` of type `Int!`
  """
  make_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`model_count` of type `Int!`
  """
  model_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`plateNumber_count` of type `Int!`
  """
  plateNumber_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`retrievedAt_count` of type `Int!`
  """
  retrievedAt_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`year_count` of type `Int!`
  """
  year_count: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`year_sum` of type `Int`
  """
  year_sum: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`year_avg` of type `Float`
  """
  year_avg: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`lastRegistrationDate_min` of type `Date`
  """
  lastRegistrationDate_min: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`retrievedAt_min` of type `Timestamp`
  """
  retrievedAt_min: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`year_min` of type `Int`
  """
  year_min: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`lastRegistrationDate_max` of type `Date`
  """
  lastRegistrationDate_max: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`retrievedAt_max` of type `Timestamp`
  """
  retrievedAt_max: OrderDirection
  """
  ✨ Generated from Field `VehicleInfo`.`year_max` of type `Int`
  """
  year_max: OrderDirection
}
